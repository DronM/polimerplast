DELETE FROM public.doc_orders_t_tmp_products;

ALTER TABLE public.doc_orders_t_tmp_products ADD COLUMN total_no_deliv numeric(15,2) DEFAULT 0;
ALTER TABLE public.doc_orders_t_products ADD COLUMN total_no_deliv numeric(15,2) DEFAULT 0;


-- Function: public.doc_orders_before_write(character varying, integer)

-- DROP FUNCTION public.doc_orders_before_write(character varying, integer);

CREATE OR REPLACE FUNCTION public.doc_orders_before_write(
    in_view_id character varying,
    in_doc_id integer)
  RETURNS void AS
$BODY$
BEGIN				
	--clear fact table
	DELETE FROM doc_orders_t_products WHERE doc_id=in_doc_id;
	
	--copy data from temp to fact table
	INSERT INTO doc_orders_t_products
	(doc_id,line_number,product_id,quant,quant_confirmed,quant_base_measure_unit,quant_confirmed_base_measure_unit,volume,weight,price,price_edit,total,total_pack,
	mes_length,mes_width,mes_height,measure_unit_id,pack_exists,pack_in_price,total_deliv,
	price_no_deliv,total_no_deliv)
	(SELECT in_doc_id
	,line_number,product_id,quant,quant_confirmed,quant_base_measure_unit,quant_confirmed_base_measure_unit,volume,weight,price,price_edit,total,total_pack,
	mes_length,mes_width,mes_height,measure_unit_id,pack_exists,pack_in_price,total_deliv,
	price_no_deliv,total_no_deliv
	FROM doc_orders_t_tmp_products
	WHERE view_id=in_view_id);				
	
	--clear temp table
	DELETE FROM doc_orders_t_tmp_products WHERE view_id=in_view_id;

	--*******************
	--clear fact table
	DELETE FROM doc_orders_t_cust_surveys WHERE doc_id=in_doc_id;
	
	--copy data from temp to fact table
	INSERT INTO doc_orders_t_cust_surveys
	(doc_id,line_number,
		customer_survey_question_id,points,answer_comment)
	(SELECT in_doc_id,line_number,
		customer_survey_question_id,points,answer_comment
	FROM doc_orders_t_tmp_cust_surveys
	WHERE view_id=in_view_id);				
	
	--clear temp table
	DELETE FROM doc_orders_t_tmp_cust_surveys WHERE view_id=in_view_id;
	
	--*******************
	
	--totals
	PERFORM doc_orders_update_totals(in_doc_id);
	/*
	UPDATE doc_orders
	SET
		product_str = prod.products,
		total_quant = prod.quant_sum,
		total_volume = prod.volume_sum,
		total_weight = prod.weight_sum,
		total = prod.total_sum,
		total_pack = prod.total_pack_sum
	FROM (
		SELECT
			string_agg(p.name,',') AS products,
			SUM(t.quant) AS quant_sum,
			SUM(t.volume) AS volume_sum,
			SUM(t.weight) AS weight_sum,
			coalesce(SUM(t.total),0) AS total_sum,
			coalesce(SUM(t.total_pack),0) AS total_pack_sum
		FROM doc_orders_t_products AS t
		LEFT JOIN products AS p ON p.id=t.product_id
		WHERE t.doc_id=in_doc_id
	) AS prod
	WHERE id=in_doc_id;
	*/
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.doc_orders_before_write(character varying, integer)
  OWNER TO polimerplast;


-- Function: public.doc_orders_before_open(character varying, integer, integer)

-- DROP FUNCTION public.doc_orders_before_open(character varying, integer, integer);

CREATE OR REPLACE FUNCTION public.doc_orders_before_open(
    in_view_id character varying,
    in_login_id integer,
    in_doc_id integer)
  RETURNS void AS
$BODY$
BEGIN
	--DELETE FROM doc_orders_t_tmp_products WHERE login_id=in_login_id;
	DELETE FROM doc_orders_t_tmp_products WHERE view_id=in_view_id;
	
	IF (in_doc_id IS NOT NULL AND in_doc_id>0) THEN
		INSERT INTO doc_orders_t_tmp_products
		(login_id,view_id,line_number,product_id,quant,quant_confirmed,quant_base_measure_unit,quant_confirmed_base_measure_unit,
		volume,weight,price,price_edit,total,total_pack,
		mes_length,mes_width,mes_height,measure_unit_id,pack_exists,pack_in_price,total_deliv,
		price_no_deliv,total_no_deliv)
		(SELECT in_login_id, in_view_id
		,line_number,product_id,quant,quant_confirmed,quant_base_measure_unit,quant_confirmed_base_measure_unit,
		volume,weight,price,price_edit,
		total,total_pack,mes_length,mes_width,mes_height,measure_unit_id,pack_exists,pack_in_price,total_deliv,
		price_no_deliv,total_no_deliv
		FROM doc_orders_t_products
		WHERE doc_id=in_doc_id);
	END IF;

	--DELETE FROM doc_orders_t_tmp_cust_surveys WHERE login_id=in_login_id;
	DELETE FROM doc_orders_t_tmp_cust_surveys WHERE view_id=in_view_id;
	
	IF (in_doc_id IS NOT NULL AND in_doc_id>0) THEN
	
		INSERT INTO doc_orders_t_tmp_cust_surveys
		(login_id,view_id,line_number,customer_survey_question_id,points,answer_comment)
		(SELECT in_login_id, in_view_id
		,line_number,customer_survey_question_id,points,answer_comment
		FROM doc_orders_t_cust_surveys
		WHERE doc_id=in_doc_id);
	END IF;
	
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.doc_orders_before_open(character varying, integer, integer)
  OWNER TO polimerplast;


-- View: public.doc_orders_t_tmp_products_list

-- DROP VIEW public.doc_orders_t_tmp_products_list;

CREATE OR REPLACE VIEW public.doc_orders_t_tmp_products_list AS 
	SELECT t.login_id,
		t.view_id,
		t.line_number,
		t.product_id,
		products_descr(p.*, t.mes_length, t.mes_width, t.mes_height) AS product_descr,
		t.mes_length,
		t.mes_width,
		t.mes_height,
		t.volume,
		t.weight,
		t.quant_base_measure_unit AS quant,
		round(t.quant_base_measure_unit, 0) AS quant_descr,
		t.quant_confirmed_base_measure_unit,
		t.price,
		format_money(t.price) AS price_descr,
		t.total,
		format_money(t.total) AS total_descr,
		t.total_pack,
		t.pack_exists,
		p.base_measure_unit_id AS measure_unit_id,
		mu.name AS measure_unit_descr,
		t.quant AS doc_quant,
		t.measure_unit_id AS doc_measure_unit_id,
		mu_doc.name AS doc_measure_unit_descr,
		CASE
			WHEN t.quant_confirmed_base_measure_unit > 0::numeric THEN
				(SELECT
					doc_order_calc_quant(t.product_id,
							t.measure_unit_id,
							t.mes_length,
							t.mes_width,
							t.mes_height,
							t.quant_confirmed_base_measure_unit
					) AS doc_order_calc_quant
				)
		ELSE 0::numeric
		END AS quant_confirmed_measure_unit,
		COALESCE(t.total_deliv, 0::numeric) AS total_deliv,
		
		COALESCE(t.total_no_deliv, 0::numeric) AS total_no_deliv,
		COALESCE(t.price_no_deliv, 0::numeric) AS price_no_deliv
		
		/*
		COALESCE(t.total, 0::numeric) - COALESCE(t.total_deliv, 0::numeric) AS total_no_deliv,
		CASE
			WHEN t.quant_base_measure_unit = 0::numeric THEN 0::numeric
		ELSE round((COALESCE(t.total, 0::numeric) - COALESCE(t.total_deliv, 0::numeric)) / t.quant_base_measure_unit, 2)
		END AS price_no_deliv
		*/
		
	FROM doc_orders_t_tmp_products t
	LEFT JOIN products p ON p.id = t.product_id
	LEFT JOIN measure_units mu ON mu.id = p.base_measure_unit_id
	LEFT JOIN measure_units mu_doc ON mu_doc.id = t.measure_unit_id
	ORDER BY t.line_number;

ALTER TABLE public.doc_orders_t_tmp_products_list
  OWNER TO polimerplast;


-- View: public.doc_orders_t_tmp_products_dialog

 DROP VIEW public.doc_orders_t_tmp_products_dialog;

CREATE OR REPLACE VIEW public.doc_orders_t_tmp_products_dialog AS 
 SELECT t.login_id,
    t.view_id,
    t.line_number,
    t.product_id,
    p.name AS product_descr,
    t.quant,
    round(t.quant, 0) AS quant_descr,
    t.quant_base_measure_unit,
    t.quant_confirmed_base_measure_unit,
    t.volume,
    t.weight,
    t.price,
    format_money(t.price) AS price_descr,
    t.total,
    format_money(t.total) AS total_descr,
    t.mes_length,
    t.mes_width,
    t.mes_height,
    t.measure_unit_id,
    mu.name AS measure_unit_descr,
    mu.is_int AS measure_unit_is_int,
    t.pack_exists,
    t.pack_in_price,
    t.price_edit,
    p.base_measure_unit_id,
    base_mu.name AS base_measure_unit_descr,
    base_mu.is_int AS base_measure_unit_is_int,
        CASE
            WHEN t.quant_confirmed_base_measure_unit > 0::numeric THEN ( SELECT doc_order_calc_quant(t.product_id, t.measure_unit_id, t.mes_length, t.mes_width, t.mes_height, t.quant_confirmed_base_measure_unit) AS doc_order_calc_quant)
            ELSE 0::numeric
        END AS quant_confirmed_measure_unit,
    COALESCE(t.total_deliv, 0::numeric) AS total_deliv,
    t.total_no_deliv,
    t.price_no_deliv
   FROM doc_orders_t_tmp_products t
     LEFT JOIN products p ON p.id = t.product_id
     LEFT JOIN measure_units mu ON mu.id = t.measure_unit_id
     LEFT JOIN measure_units base_mu ON base_mu.id = p.base_measure_unit_id
  ORDER BY t.line_number;

ALTER TABLE public.doc_orders_t_tmp_products_dialog
  OWNER TO polimerplast;




--************************************

